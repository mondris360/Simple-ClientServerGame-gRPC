// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BodyColor.proto

package com.mondris.generatedProtobufClass;

/**
 * Protobuf enum {@code BodyColor}
 */
public enum BodyColor
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * default value;
   * </pre>
   *
   * <code>Unknown = 0;</code>
   */
  Unknown(0),
  /**
   * <code>Red = 1;</code>
   */
  Red(1),
  /**
   * <code>Black = 2;</code>
   */
  Black(2),
  /**
   * <code>Green = 3;</code>
   */
  Green(3),
  /**
   * <code>Yellow = 4;</code>
   */
  Yellow(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * default value;
   * </pre>
   *
   * <code>Unknown = 0;</code>
   */
  public static final int Unknown_VALUE = 0;
  /**
   * <code>Red = 1;</code>
   */
  public static final int Red_VALUE = 1;
  /**
   * <code>Black = 2;</code>
   */
  public static final int Black_VALUE = 2;
  /**
   * <code>Green = 3;</code>
   */
  public static final int Green_VALUE = 3;
  /**
   * <code>Yellow = 4;</code>
   */
  public static final int Yellow_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static BodyColor valueOf(int value) {
    return forNumber(value);
  }

  public static BodyColor forNumber(int value) {
    switch (value) {
      case 0: return Unknown;
      case 1: return Red;
      case 2: return Black;
      case 3: return Green;
      case 4: return Yellow;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<BodyColor>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      BodyColor> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<BodyColor>() {
          public BodyColor findValueByNumber(int number) {
            return BodyColor.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.mondris.generatedProtobufClass.BodyColorOuterClass.getDescriptor().getEnumTypes().get(0);
  }

  private static final BodyColor[] VALUES = values();

  public static BodyColor valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private BodyColor(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:BodyColor)
}

